{"ast":null,"code":"var _jsxFileName = \"/home/titus/Development/code/phase-2/bot-battlr-code-challange/src/components/BotCollection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport BotCard from './BotCard';\nimport FilterBar from './FilterBar';\nimport SortBar from './SortBar';\nimport YourBotArmy from './YourBotArmy'; // Import YourBotArmy component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BotCollection() {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [enlistedBots, setEnlistedBots] = useState([]); // New state to hold enlisted bots\n  const [sortCriteria, setSortCriteria] = useState(null);\n  useEffect(() => {\n    // Fetch data from the local server using Axios (or any other method)\n    axios.get('http://localhost:8001/bots').then(response => {\n      setBots(response.data);\n      setFilteredBots(response.data); // Initialize filteredBots with all bots\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, []);\n  const handleFilter = botClass => {\n    if (botClass === 'all') {\n      setFilteredBots(bots); // Show all bots\n    } else {\n      const filtered = bots.filter(bot => bot.bot_class === botClass);\n      setFilteredBots(filtered); // Show bots of the selected class\n    }\n  };\n\n  const handleSort = criteria => {\n    setSortCriteria(criteria);\n    if (criteria === null) {\n      setFilteredBots(bots); // Reset to the original order\n    } else {\n      const sorted = [...filteredBots].sort((a, b) => b[criteria] - a[criteria]);\n      setFilteredBots(sorted); // Sort the bots based on the selected criteria\n    }\n  };\n\n  const handleEnlist = bot => {\n    // Add the bot to the enlistedBots state if it's not already enlisted\n    if (!enlistedBots.some(enlistedBot => enlistedBot.id === bot.id)) {\n      setEnlistedBots(prevEnlistedBots => [...prevEnlistedBots, bot]);\n    }\n  };\n  const handleRelease = bot => {\n    // Remove the bot from the enlistedBots state\n    setEnlistedBots(prevEnlistedBots => prevEnlistedBots.filter(enlistedBot => enlistedBot.id !== bot.id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bot Collection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      onFilter: handleFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortBar, {\n      onSort: handleSort\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bot-list\",\n      children: filteredBots.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n        bot: bot,\n        onEnlist: handleEnlist\n      }, bot.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YourBotArmy, {\n      enlistedBots: enlistedBots,\n      onRelease: handleRelease\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(BotCollection, \"3Q8uXxpG/+UjN0yzLFXH1RavvH4=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useState","useEffect","axios","BotCard","FilterBar","SortBar","YourBotArmy","jsxDEV","_jsxDEV","BotCollection","_s","bots","setBots","filteredBots","setFilteredBots","enlistedBots","setEnlistedBots","sortCriteria","setSortCriteria","get","then","response","data","catch","error","console","handleFilter","botClass","filtered","filter","bot","bot_class","handleSort","criteria","sorted","sort","a","b","handleEnlist","some","enlistedBot","id","prevEnlistedBots","handleRelease","children","fileName","_jsxFileName","lineNumber","columnNumber","onFilter","onSort","className","map","onEnlist","onRelease","_c","$RefreshReg$"],"sources":["/home/titus/Development/code/phase-2/bot-battlr-code-challange/src/components/BotCollection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport BotCard from './BotCard';\nimport FilterBar from './FilterBar';\nimport SortBar from './SortBar';\nimport YourBotArmy from './YourBotArmy'; // Import YourBotArmy component\n\nfunction BotCollection() {\n  const [bots, setBots] = useState([]);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [enlistedBots, setEnlistedBots] = useState([]); // New state to hold enlisted bots\n  const [sortCriteria, setSortCriteria] = useState(null);\n\n  useEffect(() => {\n    // Fetch data from the local server using Axios (or any other method)\n    axios.get('http://localhost:8001/bots')\n      .then((response) => {\n        setBots(response.data);\n        setFilteredBots(response.data); // Initialize filteredBots with all bots\n      })\n      .catch((error) => {\n        console.error('Error fetching data:', error);\n      });\n  }, []);\n  const handleFilter = (botClass) => {\n    if (botClass === 'all') {\n      setFilteredBots(bots); // Show all bots\n    } else {\n      const filtered = bots.filter((bot) => bot.bot_class === botClass);\n      setFilteredBots(filtered); // Show bots of the selected class\n    }\n  };\n\n  const handleSort = (criteria) => {\n    setSortCriteria(criteria);\n    if (criteria === null) {\n      setFilteredBots(bots); // Reset to the original order\n    } else {\n      const sorted = [...filteredBots].sort((a, b) => b[criteria] - a[criteria]);\n      setFilteredBots(sorted); // Sort the bots based on the selected criteria\n    }\n  };\n  const handleEnlist = (bot) => {\n    // Add the bot to the enlistedBots state if it's not already enlisted\n    if (!enlistedBots.some((enlistedBot) => enlistedBot.id === bot.id)) {\n      setEnlistedBots((prevEnlistedBots) => [...prevEnlistedBots, bot]);\n    }\n  };\n\n  const handleRelease = (bot) => {\n    // Remove the bot from the enlistedBots state\n    setEnlistedBots((prevEnlistedBots) =>\n      prevEnlistedBots.filter((enlistedBot) => enlistedBot.id !== bot.id)\n    );\n  };\n\n  return (\n    <div>\n      <h1>Bot Collection</h1>\n      <FilterBar onFilter={handleFilter} />\n      <SortBar onSort={handleSort} />\n      <div className=\"bot-list\">\n        {filteredBots.map((bot) => (\n          <BotCard key={bot.id} bot={bot} onEnlist={handleEnlist} />\n        ))}\n      </div>\n      <YourBotArmy enlistedBots={enlistedBots} onRelease={handleRelease} /> {/* Pass enlistedBots and onRelease */}\n    </div>\n  );\n}\n\nexport default BotCollection;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}